datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  auth_id   String?    @unique
  nickname  String
  email     String     @unique
  image     String?
  creatorOf projects[] @relation("project_owner")
  webhooks  webhooks[]
  memberOf  projects[] @relation("project_members")
}

model projects {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()"))
  created_at                   DateTime                       @default(now())
  title                        String                         @default("New Project")
  image_id                     String?
  owner_id                     String
  default_dice_color           String?
  alter_names                  alter_names[]
  blueprints                   blueprints[]
  calendars                    calendars[]
  character_fields_templates   character_fields_templates[]
  character_relationship_types character_relationship_types[]
  characters                   characters[]
  conversations                conversations[]
  dictionaries                 dictionaries[]
  documents                    documents[]
  graphs                       graphs[]
  images                       images[]                       @relation("projects_images")
  image                        images?                        @relation("project_image")
  maps                         maps[]
  owner                        users                          @relation("project_owner", fields: [owner_id], references: [id], onDelete: Cascade)
  random_tables                random_tables[]
  tags                         tags[]
  timelines                    timelines[]
  members                      users[]                        @relation("project_members")
}

model images {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()"))
  title                     String
  project_id                String?
  project_image_id          String?                     @unique
  character_id              String?
  type                      ImageType                   @default(images)
  blueprint_instance_images blueprint_instance_images[]
  character_portraits       characters[]                @relation("character_portraits")
  documents                 documents[]
  events                    events[]
  project                   projects?                   @relation("projects_images", fields: [project_id], references: [id])
  project_image             projects?                   @relation("project_image", fields: [project_image_id], references: [id])
  map_layers                map_layers[]
  map_pins                  map_pins[]
  maps                      maps[]
  nodes                     nodes[]
  characters                characters[]                @relation("charactersToimages")
}

model blueprints {
  id                       String                @id @default(dbgenerated("gen_random_uuid()"))
  created_at               DateTime              @default(now())
  updated_at               DateTime              @default(now())
  title                    String
  project_id               String
  title_name               String
  icon                     String?
  related_blueprint_fields blueprint_fields[]    @relation("related_blueprint")
  blueprint_fields         blueprint_fields[]
  blueprint_instance       blueprint_instances[]
  project                  projects              @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model blueprint_fields {
  id                                     String                                   @id @default(dbgenerated("gen_random_uuid()"))
  title                                  String
  sort                                   Int                                      @default(0)
  options                                Json?
  formula                                String?
  parent_id                              String?
  field_type                             BlueprintFieldType
  random_table_id                        String?
  calendar_id                            String?
  blueprint_id                           String?
  related_blueprint                      blueprints?                              @relation("related_blueprint", fields: [blueprint_id], references: [id])
  calendar                               calendars?                               @relation(fields: [calendar_id], references: [id])
  blueprint                              blueprints?                              @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  random_table                           random_tables?                           @relation(fields: [random_table_id], references: [id])
  blueprint_instance_blueprint_instances blueprint_instance_blueprint_instances[]
  blueprint_instance_calendars           blueprint_instance_calendars[]
  characters                             blueprint_instance_characters[]
  documents                              blueprint_instance_documents[]
  images                                 blueprint_instance_images[]
  map_pins                               blueprint_instance_map_pins[]
  random_tables                          blueprint_instance_random_tables[]
  value                                  blueprint_instance_value[]
}

model blueprint_instances {
  id                                     String                                   @id @default(dbgenerated("gen_random_uuid()"))
  created_at                             DateTime                                 @default(now())
  updated_at                             DateTime                                 @default(now())
  parent_id                              String
  title                                  String
  blueprint_instance_blueprint_instances blueprint_instance_blueprint_instances[] @relation("main_instances")
  related_blueprint_instances            blueprint_instance_blueprint_instances[] @relation("related_blueprint_instances")
  blueprint_instance_calendars           blueprint_instance_calendars[]
  characters                             blueprint_instance_characters[]
  documents                              blueprint_instance_documents[]
  images                                 blueprint_instance_images[]
  map_pins                               blueprint_instance_map_pins[]
  random_tables                          blueprint_instance_random_tables[]
  value                                  blueprint_instance_value[]
  blueprint                              blueprints                               @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  tags                                   tags[]                                   @relation("blueprint_instancesTotags")
}

model blueprint_instance_characters {
  blueprint_instance_id String
  blueprint_field_id    String
  related_id            String
  blueprint_field       blueprint_fields    @relation(fields: [blueprint_field_id], references: [id], onDelete: Cascade)
  blueprint_instance    blueprint_instances @relation(fields: [blueprint_instance_id], references: [id], onDelete: Cascade)
  character             characters          @relation(fields: [related_id], references: [id], onDelete: Cascade)

  @@id([blueprint_instance_id, blueprint_field_id, related_id])
}

model blueprint_instance_documents {
  blueprint_instance_id String
  blueprint_field_id    String
  related_id            String
  blueprint_field       blueprint_fields    @relation(fields: [blueprint_field_id], references: [id], onDelete: Cascade)
  blueprint_instance    blueprint_instances @relation(fields: [blueprint_instance_id], references: [id], onDelete: Cascade)
  document              documents           @relation(fields: [related_id], references: [id], onDelete: Cascade)

  @@id([blueprint_instance_id, blueprint_field_id, related_id])
}

model blueprint_instance_blueprint_instances {
  blueprint_instance_id      String
  blueprint_field_id         String
  related_id                 String
  blueprint_field            blueprint_fields    @relation(fields: [blueprint_field_id], references: [id], onDelete: Cascade)
  blueprint_instance         blueprint_instances @relation("main_instances", fields: [blueprint_instance_id], references: [id], onDelete: Cascade)
  related_blueprint_instance blueprint_instances @relation("related_blueprint_instances", fields: [related_id], references: [id], onDelete: Cascade)

  @@id([blueprint_instance_id, blueprint_field_id, related_id])
}

model blueprint_instance_map_pins {
  blueprint_instance_id String
  blueprint_field_id    String
  related_id            String
  blueprint_field       blueprint_fields    @relation(fields: [blueprint_field_id], references: [id], onDelete: Cascade)
  blueprint_instance    blueprint_instances @relation(fields: [blueprint_instance_id], references: [id], onDelete: Cascade)
  map_pins              map_pins            @relation(fields: [related_id], references: [id], onDelete: Cascade)

  @@id([blueprint_instance_id, blueprint_field_id, related_id])
}

model blueprint_instance_images {
  blueprint_instance_id String
  blueprint_field_id    String
  related_id            String
  blueprint_field       blueprint_fields    @relation(fields: [blueprint_field_id], references: [id], onDelete: Cascade)
  blueprint_instance    blueprint_instances @relation(fields: [blueprint_instance_id], references: [id], onDelete: Cascade)
  image                 images              @relation(fields: [related_id], references: [id], onDelete: Cascade)

  @@id([blueprint_instance_id, blueprint_field_id, related_id])
}

model blueprint_instance_random_tables {
  blueprint_instance_id  String
  blueprint_field_id     String
  related_id             String
  option_id              String?
  suboption_id           String?
  blueprint_field        blueprint_fields         @relation(fields: [blueprint_field_id], references: [id], onDelete: Cascade)
  blueprint_instance     blueprint_instances      @relation(fields: [blueprint_instance_id], references: [id], onDelete: Cascade)
  random_table_option    random_table_options?    @relation(fields: [option_id], references: [id])
  random_table           random_tables            @relation(fields: [related_id], references: [id], onDelete: Cascade)
  random_table_suboption random_table_suboptions? @relation(fields: [suboption_id], references: [id])

  @@id([blueprint_instance_id, blueprint_field_id, related_id])
  @@unique([blueprint_instance_id, blueprint_field_id, related_id])
}

model blueprint_instance_calendars {
  blueprint_instance_id String
  blueprint_field_id    String
  related_id            String
  end_month_id          String?
  start_month_id        String?
  end_day               Int?
  end_year              Int?
  start_day             Int?
  start_year            Int?
  blueprint_field       blueprint_fields    @relation(fields: [blueprint_field_id], references: [id], onDelete: Cascade)
  blueprint_instance    blueprint_instances @relation(fields: [blueprint_instance_id], references: [id], onDelete: Cascade)
  end_month             months?             @relation("endMonth", fields: [end_month_id], references: [id])
  calendar              calendars           @relation(fields: [related_id], references: [id], onDelete: Cascade)
  start_month           months?             @relation("startMonth", fields: [start_month_id], references: [id])

  @@id([blueprint_instance_id, blueprint_field_id, related_id])
  @@unique([blueprint_instance_id, blueprint_field_id, related_id])
}

model blueprint_instance_value {
  blueprint_instance_id String
  blueprint_field_id    String
  value                 Json?
  blueprint_field       blueprint_fields    @relation(fields: [blueprint_field_id], references: [id], onDelete: Cascade)
  blueprint_instance    blueprint_instances @relation(fields: [blueprint_instance_id], references: [id], onDelete: Cascade)

  @@id([blueprint_instance_id, blueprint_field_id])
}

model characters {
  id                             String                           @id @default(dbgenerated("gen_random_uuid()"))
  created_at                     DateTime                         @default(now())
  updated_at                     DateTime                         @default(now())
  project_id                     String
  is_favorite                    Boolean?
  first_name                     String
  last_name                      String?
  nickname                       String?
  age                            Int?
  portrait_id                    String?
  blueprint_instance_characters  blueprint_instance_characters[]
  portrait                       images?                          @relation("character_portraits", fields: [portrait_id], references: [id])
  project                        projects                         @relation(fields: [project_id], references: [id], onDelete: Cascade)
  related_from                   characters_relationships[]       @relation("characters_character_relations_a")
  related_to                     characters_relationships[]       @relation("characters_character_relations_b")
  characters_to_character_fields characters_to_character_fields[]
  messages                       messages[]
  nodes                          nodes[]
  conversations                  conversations[]                  @relation("charactersToconversations")
  documents                      documents[]                      @relation("charactersTodocuments")
  images                         images[]                         @relation("charactersToimages")
  tags                           tags[]                           @relation("charactersTotags")
}

model character_fields {
  id                             String                           @id @default(dbgenerated("gen_random_uuid()"))
  title                          String
  sort                           Int                              @default(0)
  field_type                     String
  formula                        String?
  random_table_id                String?
  parent_id                      String?
  options                        Json?
  calendar_id                    String?
  blueprint_id                   String?
  character_fields_templates     character_fields_templates?      @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  characters_to_character_fields characters_to_character_fields[]
}

model character_fields_templates {
  id               String             @id @default(dbgenerated("gen_random_uuid()"))
  title            String
  project_id       String
  sort             Int                @default(0)
  character_fields character_fields[]
  project          projects           @relation(fields: [project_id], references: [id], onDelete: Cascade)
  tags             tags[]             @relation("character_fields_templatesTotags")
}

model characters_to_character_fields {
  character_id       String
  character_field_id String
  value              Json?
  character_field    character_fields @relation(fields: [character_field_id], references: [id], onDelete: Cascade)
  character          characters       @relation(fields: [character_id], references: [id], onDelete: Cascade)

  @@id([character_id, character_field_id])
}

model character_relationship_types {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()"))
  title                    String
  project_id               String
  ascendant_title          String?
  descendant_title         String?
  project                  projects                   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  characters_relationships characters_relationships[]

  @@unique([project_id, title])
}

model characters_relationships {
  character_a_id   String
  character_b_id   String
  relation_type_id String
  id               String                       @id @default(dbgenerated("gen_random_uuid()"))
  character_a      characters                   @relation("characters_character_relations_a", fields: [character_a_id], references: [id], onDelete: Cascade)
  character_b      characters                   @relation("characters_character_relations_b", fields: [character_b_id], references: [id], onDelete: Cascade)
  relation_type    character_relationship_types @relation(fields: [relation_type_id], references: [id], onDelete: Cascade)

  @@unique([character_a_id, character_b_id, relation_type_id])
}

model conversations {
  id         String       @id @default(dbgenerated("gen_random_uuid()"))
  title      String
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  project_id String
  project    projects     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  messages   messages[]
  characters characters[] @relation("charactersToconversations")
}

model messages {
  id           String                  @id @default(dbgenerated("gen_random_uuid()"))
  created_at   DateTime                @default(now())
  updated_at   DateTime                @default(now())
  content      Json
  sender_id    String?
  type         ConversationMessageType
  parent_id    String
  conversation conversations           @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  sender       characters?             @relation(fields: [sender_id], references: [id])
}

model documents {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()"))
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @default(now())
  title                        String                         @default("New Document")
  content                      Json?
  icon                         String?
  is_folder                    Boolean?
  is_public                    Boolean?
  is_template                  Boolean?
  properties                   Json?
  dice_color                   String?
  project_id                   String
  parent_id                    String?
  image_id                     String?
  ts                           Unsupported("tsvector")?       @default(dbgenerated("to_tsvector('english'::regconfig, 'title')"))
  alter_names                  alter_names[]
  blueprint_instance_documents blueprint_instance_documents[]
  image                        images?                        @relation(fields: [image_id], references: [id])
  parent                       documents?                     @relation("parentChildDocuments", fields: [parent_id], references: [id], onDelete: Cascade)
  children                     documents[]                    @relation("parentChildDocuments")
  project                      projects                       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  events                       events[]
  nodes                        nodes[]
  characters                   characters[]                   @relation("charactersTodocuments")
  tags                         tags[]                         @relation("documentsTotags")

  @@index([ts], map: "ts_idx", type: Gin)
}

model alter_names {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  title      String    @default("New Document")
  project_id String
  parent_id  String
  document   documents @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  project    projects  @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@unique([title, parent_id])
}

model maps {
  id           String       @id @default(dbgenerated("gen_random_uuid()"))
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  title        String       @default("New Map")
  is_folder    Boolean?
  is_public    Boolean?
  cluster_pins Boolean?
  icon         String?
  project_id   String
  parent_id    String?
  image_id     String?
  map_layers   map_layers[]
  map_pins     map_pins[]
  image        images?      @relation(fields: [image_id], references: [id])
  parent       maps?        @relation("parentChildMaps", fields: [parent_id], references: [id], onDelete: Cascade)
  children     maps[]       @relation("parentChildMaps")
  project      projects     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  nodes        nodes[]
  tags         tags[]       @relation("mapsTotags")
}

model map_pins {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()"))
  title                       String?
  parent_id                   String
  lat                         Float
  lng                         Float
  color                       String?
  border_color                String?
  background_color            String?
  icon                        String?
  show_background             Boolean                       @default(true)
  show_border                 Boolean                       @default(true)
  is_public                   Boolean?
  map_link                    String?
  doc_id                      String?
  image_id                    String?
  character_id                String?
  blueprint_instance_map_pins blueprint_instance_map_pins[]
  image                       images?                       @relation(fields: [image_id], references: [id])
  parent                      maps                          @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  nodes                       nodes[]
  tags                        tags[]                        @relation("map_pinsTotags")
}

model map_layers {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  title     String   @default("New Layer")
  parent_id String
  is_public Boolean?
  image_id  String
  image     images   @relation(fields: [image_id], references: [id], onDelete: Cascade)
  maps      maps     @relation(fields: [parent_id], references: [id], onDelete: Cascade)
}

model graphs {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())
  title              String   @default("New graph")
  is_folder          Boolean?
  is_public          Boolean?
  icon               String?
  default_node_shape String   @default("rectangle")
  default_node_color String   @default("#595959")
  default_edge_color String   @default("#595959")
  project_id         String
  parent_id          String?
  edges              edges[]
  parent             graphs?  @relation("parentChildGraphs", fields: [parent_id], references: [id], onDelete: Cascade)
  children           graphs[] @relation("parentChildGraphs")
  project            projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  nodes              nodes[]
  tags               tags[]   @relation("graphsTotags")
}

model nodes {
  id                 String      @id @default(dbgenerated("gen_random_uuid()"))
  label              String?
  type               String?
  width              Int?
  height             Int?
  x                  Float?
  y                  Float?
  font_size          Int?
  font_color         String?
  font_family        String?
  text_v_align       String?
  text_h_align       String?
  background_color   String?
  background_opacity Float?
  is_locked          Boolean?
  is_template        Boolean?
  z_index            Int?
  parent_id          String
  image_id           String?
  doc_id             String?
  character_id       String?
  event_id           String?
  map_id             String?
  map_pin_id         String?
  edges_source       edges[]     @relation("edges_source")
  edges_target       edges[]     @relation("edges_target")
  character          characters? @relation(fields: [character_id], references: [id])
  document           documents?  @relation(fields: [doc_id], references: [id])
  event              events?     @relation(fields: [event_id], references: [id])
  image              images?     @relation(fields: [image_id], references: [id])
  map                maps?       @relation(fields: [map_id], references: [id])
  map_pin            map_pins?   @relation(fields: [map_pin_id], references: [id])
  graph              graphs      @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  tags               tags[]      @relation("nodesTotags")
}

model edges {
  id                      String  @id @default(dbgenerated("gen_random_uuid()"))
  label                   String?
  curve_style             String?
  line_style              String?
  line_color              String?
  line_fill               String?
  line_opacity            Float?
  width                   Int?
  control_point_distances Int?
  control_point_weights   Float?
  taxi_direction          String?
  taxi_turn               Int?
  arrow_scale             Int?
  target_arrow_shape      String?
  target_arrow_fill       String?
  target_arrow_color      String?
  source_arrow_shape      String?
  source_arrow_fill       String?
  source_arrow_color      String?
  mid_target_arrow_shape  String?
  mid_target_arrlow_fill  String?
  mid_target_arrlow_color String?
  mid_source_arrow_shape  String?
  mid_source_arrow_fill   String?
  mid_source_arrow_color  String?
  font_size               Int?
  font_color              String?
  font_family             String?
  z_index                 Int?
  source_id               String
  target_id               String
  parent_id               String
  graph                   graphs  @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  source                  nodes   @relation("edges_source", fields: [source_id], references: [id], onDelete: Cascade)
  target                  nodes   @relation("edges_target", fields: [target_id], references: [id], onDelete: Cascade)
  tags                    tags[]  @relation("edgesTotags")
}

model dictionaries {
  id         String         @id @default(dbgenerated("gen_random_uuid()"))
  created_at DateTime       @default(now())
  updated_at DateTime       @default(now())
  title      String
  project_id String
  icon       String?
  is_folder  Boolean?
  is_public  Boolean?
  parent_id  String?
  parent     dictionaries?  @relation("parentChildDictionaries", fields: [parent_id], references: [id], onDelete: Cascade)
  children   dictionaries[] @relation("parentChildDictionaries")
  project    projects       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  words      words[]
  tags       tags[]         @relation("dictionariesTotags")

  @@unique([project_id, title])
}

model words {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String?
  translation String
  parent_id   String
  dictionary  dictionaries @relation(fields: [parent_id], references: [id], onDelete: Cascade)

  @@unique([title, translation, parent_id])
}

model calendars {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()"))
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @default(now())
  title                        String
  project_id                   String
  parent_id                    String?
  icon                         String?
  is_folder                    Boolean?
  is_public                    Boolean?
  offset                       Int                            @default(0)
  hours                        Int?
  minutes                      Int?
  days                         String[]
  blueprint_fields             blueprint_fields[]
  blueprint_instance_calendars blueprint_instance_calendars[]
  parent                       calendars?                     @relation("parentChildCalendar", fields: [parent_id], references: [id], onDelete: Cascade)
  children                     calendars[]                    @relation("parentChildCalendar")
  project                      projects                       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  events                       events[]
  months                       months[]
  tags                         tags[]                         @relation("calendarsTotags")
  timelines                    timelines[]                    @relation("calendarsTotimelines")
}

model months {
  id                       String                         @id @default(dbgenerated("gen_random_uuid()"))
  title                    String
  days                     Int
  sort                     Int                            @default(0)
  parent_id                String
  end_instance_calendars   blueprint_instance_calendars[] @relation("endMonth")
  start_instance_calendars blueprint_instance_calendars[] @relation("startMonth")
  calendar                 calendars                      @relation(fields: [parent_id], references: [id], onDelete: Cascade)
}

model events {
  id               String     @id @default(dbgenerated("gen_random_uuid()"))
  title            String
  description      String?
  is_public        Boolean?
  background_color String?
  text_color       String?
  hours            Int?
  minutes          Int?
  document_id      String?
  image_id         String?
  parent_id        String
  end_day          Int?
  end_month        Int?
  end_year         Int?
  start_day        Int
  start_month      Int
  start_year       Int
  document         documents? @relation(fields: [document_id], references: [id])
  image            images?    @relation(fields: [image_id], references: [id])
  calendar         calendars  @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  nodes            nodes[]
  tags             tags[]     @relation("eventsTotags")
}

model timelines {
  id         String      @id @default(dbgenerated("gen_random_uuid()"))
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
  title      String
  project_id String
  parent_id  String?
  icon       String?
  is_folder  Boolean?
  is_public  Boolean?
  parent     timelines?  @relation("parentChildTimeline", fields: [parent_id], references: [id], onDelete: Cascade)
  children   timelines[] @relation("parentChildTimeline")
  project    projects    @relation(fields: [project_id], references: [id], onDelete: Cascade)
  calendars  calendars[] @relation("calendarsTotimelines")
}

model random_tables {
  id                               String                             @id @default(dbgenerated("gen_random_uuid()"))
  created_at                       DateTime                           @default(now())
  updated_at                       DateTime                           @default(now())
  title                            String
  description                      String?
  project_id                       String
  parent_id                        String?
  icon                             String?
  is_folder                        Boolean?
  is_public                        Boolean?
  blueprint_fields                 blueprint_fields[]
  blueprint_instance_random_tables blueprint_instance_random_tables[]
  random_table_options             random_table_options[]
  parent                           random_tables?                     @relation("parentChildRandomTables", fields: [parent_id], references: [id], onDelete: Cascade)
  children                         random_tables[]                    @relation("parentChildRandomTables")
  project                          projects                           @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model random_table_options {
  id                               String                             @id @default(dbgenerated("gen_random_uuid()"))
  title                            String
  description                      String?
  parent_id                        String
  icon                             String?
  icon_color                       String?
  blueprint_instance_random_tables blueprint_instance_random_tables[]
  random_table                     random_tables                      @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  random_table_suboptions          random_table_suboptions[]
}

model random_table_suboptions {
  id                               String                             @id @default(dbgenerated("gen_random_uuid()"))
  title                            String
  description                      String?
  parent_id                        String
  blueprint_instance_random_tables blueprint_instance_random_tables[]
  random_table_option              random_table_options               @relation(fields: [parent_id], references: [id], onDelete: Cascade)
}

model tags {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()"))
  title                      String
  color                      String
  project_id                 String
  project                    projects                     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  blueprint_instances        blueprint_instances[]        @relation("blueprint_instancesTotags")
  calendars                  calendars[]                  @relation("calendarsTotags")
  character_fields_templates character_fields_templates[] @relation("character_fields_templatesTotags")
  characters                 characters[]                 @relation("charactersTotags")
  dictionaries               dictionaries[]               @relation("dictionariesTotags")
  documents                  documents[]                  @relation("documentsTotags")
  edges                      edges[]                      @relation("edgesTotags")
  events                     events[]                     @relation("eventsTotags")
  graphs                     graphs[]                     @relation("graphsTotags")
  map_pins                   map_pins[]                   @relation("map_pinsTotags")
  maps                       maps[]                       @relation("mapsTotags")
  nodes                      nodes[]                      @relation("nodesTotags")

  @@unique([title, project_id])
}

model webhooks {
  id      String @id @default(dbgenerated("gen_random_uuid()"))
  title   String
  url     String
  user_id String
  user    users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([id, user_id])
}

enum BlueprintFieldType {
  text
  select
  select_multiple
  dice_roll
  date
  random_table
  documents_single
  documents_multiple
  images_single
  images_multiple
  locations_single
  locations_multiple
  characters_single
  characters_multiple
  number
  textarea
  blueprints_single
  blueprints_multiple
}

enum FieldType {
  text
  select
  select_multiple
  dice_roll
  date
  random_table
  documents_single
  documents_multiple
  images_single
  images_multiple
  locations_single
  locations_multiple
  number
  textarea
  blueprints_single
  blueprints_multiple
}

enum FieldWidth {
  half
  full
}

enum ConversationMessageType {
  character
  narration
  place
}

enum ImageType {
  images
  map_images
}
